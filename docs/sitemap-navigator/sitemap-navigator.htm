<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2024-08-07" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2024-09-03" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2024-10-20" />
<meta name="version" content="1" />
<meta name="sectionTitle" content="../title.svg" />

<link rel="icon" type="image/svg+xml" href="/favicon.svg" sizes="all" />
<link rel="stylesheet" href="/inc/webcat/page-structure/tutorial-page-1.css" />
<script type="module" src="/inc/webcat/page-structure/tutorial-page-1.js" ></script>

<meta name="categories" content="Projects > Web > Content Authoring Toolbox" />
<meta name="tags" content="web, authoring, toolbox, HTML, JavaScript, CSS" />
<title>Web > Content Authoring Toolbox > Sitemap Navigator</title>
<meta name="description" content="The <em>sitemap navigator</em> manages a tree-structured sitemap with links to website pages. The component works in (traditional) multi-page, single-page and mixed website environments. A large sitemap can be broken into smaller <em>sitemap fragments</em>. <em>Partially loaded sitemaps</em> reduce the memory footprint in the browser and reduce load times. The sitemap navigator manages these fragments and loads them as required." />

</head><body data-collapsible-default="expanded">

<h1>Sitemap Navigator</h1>

<p id="pageAbstract"></p>

<p>The <tt>sitemap-navigator</tt> is often combined with the <tt>navigation-panel</tt>, <tt>docking-panel</tt> and <tt>collapsible-structure</tt> components to provide a rich user experience.</p>

<h2 cbc>Writing Sitemaps</h2><div>

<p>A <em>sitemap</em> is a tree structure, built on UL and LI elements, with anchor elements that point to the documents. A sitemap is usually stored in a separate file ("/toc.htm") to simplify maintenance. It can be easily integrated into an HTML document with an HTML fragment link anchor:</p>

<figure class="listing"><figcaption>Integrating the sitemap into a document</figcaption>
<pre>
&lt;a <hi>data-load-fragment</hi> href="<hi>/toc.htm</hi>"&gt;&lt;/a&gt;
</pre>
</figure>

<p>As already mentioned, the sitemap is a tree structure, built on <tt>UL</tt> elements. It contains link anchors that point to the pages in a website:</p>

<figure class="listing"><figcaption>Example sitemap structure</figcaption>
<pre>
&lt;ul <hi>class="sitemap-tree"</hi>&gt;
&lt;li&gt;&lt;a href="/index.htm"&gt;Home&lt;/a&gt;&lt/li&gt;
&lt;li&gt;&lt;a href="/section-1/section-1.htm"&gt;Section 1&lt;/a&gt;
	&lt;ul&gt;
	&lt;li&gt;&lt;a href="/section-1/document-1.htm"&gt;Document 1&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/section-2/section-2.htm"&gt;Section 2&lt;/a&gt;
	&lt;ul&gt;
	&lt;li&gt;&lt;a href="/section-2/document-2.htm"&gt;Document 2&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</pre>
</figure>

<p>A lage sitemap can be broken into several more manageable <em>sitemap fragments</em>:</p>

<figure class="listing"><figcaption>Using sitemap fragments</figcaption>
<pre>
&lt;ul <hi>class="sitemap-tree"</hi>&gt;
&lt;li&gt;&lt;a href="/index.htm"&gt;Home&lt;/a&gt;&lt/li&gt;
&lt;li&gt;&lt;a href="/section-1/section-1.htm"&gt;Section 1&lt;/a&gt;
	&lt;a <hi>data-load-fragment</hi> href="section-1/toc.htm"&gt;&lt;/a&gt;
	&lt;/li&gt;
&lt;li&gt;&lt;a href="/section-2/section-2.htm"&gt;Section 2&lt;/a&gt;
	&lt;a <hi>data-load-fragment</hi> href="section-2/toc.htm"&gt;&lt;/a&gt;
	&lt;/li&gt;
&lt;/ul&gt;
</pre>
</figure>

<p>The sitemap fragment also contains UL tree structures, and replaces the fragment link anchors:</p>

<figure class="listing"><figcaption>Example sitemap fragment</figcaption>
<pre>
&lt;ul&gt;
&lt;li&gt;&lt;a href="/section-1/document-1.htm"&gt;Document 1&lt;/a&gt;&lt;/li&gt;
...
&lt;/ul&gt;
</pre>
</figure>

<p>The example above is rather simple, but a sitemap fragment document can contain aribtrarily complex trees, and even nested sitemap fragment anchors.</p>

<p>HTML fragments are loaded asynchronously. The browser fetches them from the client-side browser cache whenever possible, so the use of sitemap fragments effectively reduces server roundtrips and improves the website performance.</p>

<!--h2--Introduction--></div>

<h2 cbc>Features</h2><div>

<dl>
<dt>Path highlighting</dt><dd>
	<p>The path between the root node and the current document is highlighted in the sitemap. The default icon color is light blue, the highlighted node icons are orange. The active not-collapsible node has an orange dot icon.</p>
	</dd>
<dt>Navigation Info Update</dt><dd>
	<p>When the user navigates to a document, a related navigation info structure is compiled and published via <tt>navigation-info-update</tt> event to the document object. Site navigation tool buttons and other components subscribe to this event and update their configuration accordingly.</p>
	</dd>
<dt>Outdated path is automatically collapsed</dt><dd>
	<p>When the user navigates to a different website page, the path to the outdated page can be automatically collapsed. To enable that feature, add the <tt>collapse-expired-path</tt> to the query string in the module URL, or add the <tt>data-collapse-expired-path</tt> attribute to the <tt>#sitemapRoot</tt> element.</p>
	</dd>
<dt>Fragmented Sitemaps</dt><dd>
	<p>With sitemap fragments, a large sitemap can be broken up into several smaller, more manageable parts. By default, fragment link anchors are processed automatically and are completely transparent.</p>
	</dd>
<dt>Partially Loaded Sitemaps</dt><dd>
	<p>A fragment link can be flagged as "interactively activated". Such a fragment link is not automatically loaded. Instead, some user interaction is required. This helps to reduce the memory footprint in the browser.</p>
	</dd>
<dt>Multiple Website Environments</dt><dd>
	<p>The <tt>sitemap-navigator</tt> works in a (traditional) multi-page website environment, a single-page website, and also in a mixed website environment.</p>
	<p>In a multi-page website, the entrire page content is loaded when a user navigates to a website page. In a single-page website, only the content of the <tt>MAIN</tt> content container is replaced. Head, toolbars, sitemap and footer are preserved (and updated if necessary).</p>
	</dd>
</dl>

<!--h2--Features--></div>

<h2 cbc>Scenarios</h2><div>

<p>Sitemap fragments are integrated into a page with HTML anchor elements:</p>

<figure class="listing"><figcaption>Integrating a sitemap fragment</figcaption>
<pre>
&lt;a class="fragment-link" href="/toc.htm"&gt;&lt;/a&gt;
</pre>
</figure>

<p>Fragments are loaded asynchronously, an can contain other fragments, which are also loaded, recursively and asynchronously.</p>

<h3 cbc>Standard (Multi-Page) Website</h3><div>

<!--h3--Standard (Multi-Page) Website--></div>


<!--h2--Scenarios--></div>

<h2 cbc>Implementation Details</h2><div>

<h3 cbc>Highlighting the Navigation Path</h3><div>

<p>The node icons in a <tt>.sitemap-tree</tt> are of a light blue color. The nodes along the path are highlighted with an orange stroke color. A non-collapsible active node gets a dedicated orange dot icon.</p>

<p>While the <tt>active</tt> class attribute is maintained by the module script, the appearances is controlled by the CSS file. The <a href="../collapsible-structures/collapsible-structures.htm"><tt>collapsible-structure</tt></a> component provides two sets of node icons, one set in orange, one in light blue. The icon images are used for background images, which doesn't allow the use of external CSS reference from inside the SVG code to change colors. Therefore, two different colored icon sets have to be provided.</p>

<p>In the <tt>sitemap-navigator.css</tt> file, two rules override the <tt>collapsible-structures</tt> rules for non-active tree nodes and prescribe a different icon color:</p>

<figure class="listing"><figcaption>Additional rules for the sitemap tree</figcaption>
<pre>
	<cc>/* Icon image for collapsed state */</cc>
.sitemap-tree [ data-collapsible-state = "collapsed" ]<hi>:not( .active )</hi>::before {
	background-image : url( ../collapsible-structures/<hi>lightblue-plus.svg</hi> );
	}

	<cc>/* Icon image for expanded state */</cc>
.sitemap-tree [ data-collapsible-state = "expanded" ]<hi>:not( .active )</hi>::before {
	background-image : url( ../collapsible-structures/<hi>lightblue-minus.svg</hi> );
	}
</pre></figure>

<p>The third rule adds a box with an icon to the LI element of an active uncollapsible tree node. The code resembles that for collapsible tree nodes:</p>

<figure class="listing"><figcaption>Additional rule for non-collapsible active nodes</figcaption>
<pre>
		<cc>/* Icon image for active document */</cc>
.sitemap-tree <hi>:not</hi>([ data-collapsible-state ])<hi>.active</hi>::before {
	content : "\00A0" ;
	position : absolute ;
	left : 0px ;
	width : 20px ;
	height : 25px ;  <cc>/* this effectively determines the vertical position */</cc>
	background-size: 15px 15px;
	background-repeat: no-repeat;
	background-position: left center;
	background-image : url( ../collapsible-structures/<hi>orange-dot.svg</hi> );
	}
</pre></figure>

<p>The element has a <tt>position:absolute</tt> style, so we cannot set the icon box position with the <tt>top</tt> property. This yould move it out of is LI parent and position it relative to the parent UL. If we don't provide value for that property, the vertical position of the box remains as if it had <tt>position:relative</tt>. </p>

<p>The rest of the properties pretty much self-explanatory.</p>

<!--h3--Highlighting the Navigation Path--></div>

<h3 cbc>Sitemap Fragments</h3><div>

<p>All Fragments in a document are loaded asynchronously. Fragments can contain other fragments, which are also loaded, recursively and asynchronously. When the loader has finished this recursive job, a "fragment-loading-complete" event is dipatched to the <tt>document</tt> object.</p>

<p>Sitemap fragments are loaded with anchor elements</p>
<p>The sitemap fragment that contains the root node is loaded first. It is </p>

<!--h3--Sitemap Fragments--></div>

<h3 cbc>Site Navigation Event</h3><div>

<p>A <em>site navigation event</em> occurs if a user navigates to a page in the website, or loads a different content in a single-page website.</p>

<!--h3--Site Navigation Event--></div>

<h3 cbc>Sitemap Navigation Event</h3><div>

<p>A <em>sitemap navigation event</em> occurs if a user clicks a link in a sitemap tree. In contrast, a click on an anchor in the main content is not considered a sitemap navigation event.</p>

<!--h3--Sitemap Navigation Event--></div>

<h3 cbc>Partially Loaded Sitemaps</h3><div>

<p>If a a document was loaded (e. g. by following a link in the previously loaded document) that is not covered by a partially loaded sitemap, the path to the current document cannot be highlited. Instead, the missing sitemap fragments must be loaded first. Unfortunately, there is no information about where to find them, the only hint provides the path to the document: Each folder might contain one of the missing fragments.</p>

<p>Example: A document has been loaded:</p>

<figure class="listing">
<pre>http://localhost/section-3/subsection-2/chapter-1/intro.htm</pre>
</figure>

<p>Currently, there is no anchor element in the sitemap tree that points to this document. That means that there must be one or more sitemap fragments still missing. We now need to find all potential fragment link anchors for that path. There are four candidates.</p>

<figure class="listing">
<pre>
<span style="color:green">http://localhost/toc.htm
http://localhost/section-3/toc.htm</span>
http://localhost/section-3/subsection-2/toc.htm
http://localhost/section-3/subsection-2/chapter-1/toc.htm
</pre>
</figure>

<p>Let's consider that the first two have already been loaded and their fragment anchors have been removed. So a search for all these candidates will find the one that points to <tt>localhost/section-3/subsection-2/toc.htm</tt>.</p>

<p>When this fragment has been loaded and injected, an anchor element for the next candidate (http://localhost/section-3/subsection-2/chapter-1/toc.htm) can be found. This fragment finally has been injected, the anchor that links to the document can be found. The path between root and document can now be highlighted.</p>

<p>Not every folder in the path to the document might contain a sitemap fragment file. If the link to the document can be found, the remaining URLs for that path can be ignored, they are considered irrelevant.</p>

<!--h3--Partially Loaded Sitemap--></div>

<h3 cbc>Partially Loaded Sitemap and Navigation Info Structure</h3><div>

<p>Two relatation types are problematic: The next node in sequential order, and the previous node in sequential order.</p>

<p>If the current node carries an interactive fragment link anchor, the fragment must be loaded, and the first link anchor in the loaded tree is the link to the next document in sequential order. If the previous node in sequential order carries a fragment link anchor, the last anchor of the loaded tree is inspected. If it has <em>no</em> fragment link anchor, this is the previous document anchor. If it <em>does</em> have a fragment link anchor, the tree is loaded, and so on.</p>

<p>If a node carries an interactive fragment link anchor, 

is found instead of a document link anchor, the content must be loaded first before the navigation info is complete. An idea: Load fragments and process a promise array. The Promise.allSettled() method then continues and fires the <tt>navigation-info-update</tt> event.</p>

<p>Alternatively, if a site-navigation button is linked to an interactive fragment anchor, the fragment can be loaded when the user activates the link. This may caus delays.</p>

<!--h3--Partially Loaded Sitemap and Navigation Info Structure--></div>

<h3 cbc>Parallel Requests for Sitemap Fragments</h3><div>

<p>Every folder in the path to the document might contain a sitemap fragment (toc.htm). The algorithm assumes that this is true an fetches all of them in parallel. Of course, some of these requests will fail. That's okay. At the end we have a list of requests and a corresponding list of text resources, and the first (topmost) sitemap fragment anchor. </p>

<p>The first resource can replace the first fragment anchor. The next fragment anchor will have to be retrieved then.</p>

<!--h3--Parallel Requests for Sitemap Fragments--></div>

<h3 cbc>Multiple Paths to the Same Document</h3><div>

<p>In an online shop website, a product may appear in several categories. But a site-map has a limitation: The same URL may not be referenced from several locations (paths), as this would lead to ambiguities while figuring out the path to the current document.</p> 

<p>Solution: <em>Symbolic links</em> or <em>hardlinks</em> can be used on the server side to eliminate the ambiguities, while the same content is still delivered from a single origin.</p>

<!--h3--Multiple Paths to the Same Document--></div>

<h3 cbc>Highlighting the Path to the Current Document</h3><div>

<p>In a multi-page website, the path to the current page is highlighted in the sitemap tree(s) when the fragment loader has finished its job. The anchor that links to the current document is searched in the sitemap tree(s), then the sitemap nodes between root and document nodes are decorated with an <tt>active</tt> attribute.</p>

<p>In a <em>partially loaded sitemap</em>, the search for that anchor might fail. Then the missing fragments are loaded before the search is retried. It is considered an <em>error</em> if the anchor still cannot be found.</p>

<p>In a single-page website, the sitemap state is always preserved. When a <tt>sitemap-navigation</tt> event occured, the path to the associated sitemap node can easily be highlighted. If a <tt>site-navigation</tt> event occurred, the path to the current content must be identified first. This is the same procedure as in a multi-page website environment.</p>

<!--h3--Highlighting the Path to the Current Document--></div>

<h3 cbc>Page Sequence and Partially Loaded Sitemap</h3><div>

<p>Lets consider the following situation:</p>

<pre>
&lt;li&gt;<hi>&lt;a</hi> href="..."&gt;Page 1&lt;/<hi>a&gt;</hi>
	&lt;ul&gt;
	&lt;li&gt;&lt;a href="..."&gt;Page 1.1&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="..."&gt;Page 2&lt;/a&gt;
	&lt;a data-load-interactive href="..."&gt;&lt;/a&gt;&lt;/li&gt;
</pre>

<p>The next page in reading order after page 1 is page 1.1. The next page after page 2 cannot be determined easily, because it might be located in the fragment referenced by the interactive fragment anchor.</p>

<p>Strategies:</p>
<ul>
<li>Load the fragment(s) when the user demands it.</li>
<li>Load the fragments(s) when a </li>
</ul>

<!--h3--Page Sequence and Partially Loaded Sitemap--></div>

<h3 cbc>Compiling the Navigation Info</h3><div>

<p>The function parameter is a reference to the sitemap entry that is associated with the current sitemap node.</p>

<p>The sitemapInfo contains references to anchor elements.</p>

<dl>
<dt>Home</dt><dd>
	<p>The home entry points to the root node of the sitemap tree.</p></dd>
<dt>SequencePrevious, SequenceNext</dt><dd>
	<p>The previous and next pages in reading sequence. Can be null if there is no such anchor.</p>	
<dt>SiblingFirst, SiblingPrevious, Sibling Next, SiblingLast</dt><dd>
	<p>Siblings are nodes on the same tree level as the current node.</p>
<dt>Parent</dt><dd>
	<p>The parent node is node above in the tree hierarchy. The root node (home) has not parent.</p></dd>
</dl>

<p>Sitemap tree nodes are always <tt>LI</tt> elements. An node usually carries text and a content link anchor, which points to the associated document. A click on that link navigates the browser to the document. An empty node has no content link anchor, just text. Empty nodes can be used to structurize the sitemap, but are unusual, and may also confuse the user. For example, if a parent node has no associated content document, the uplink button is dysfunctional (there is no address to navigate to).</p>

<p>Finding the content link anchor: </p>

<figure class="listing"><figcaption>Finding the content link of a sitemap node</figcaption>
<pre>
const a = node.querySelector( ":scope > A" );
</pre></figure>

<p>Finding the node form a content link anchor</p>

<figure class="listing"><figcaption>Finding the content link of a sitemap node</figcaption>
<pre>
const node = anchor.closest( "LI" );
</pre></figure>

<p>The following listings describe how the navigation info is compiled:</p>

<figure class="listing"><figcaption>compileNavigationInfo()</figcaption>
<pre>
function compileNavigationInfo( currentNode ) {
	navigationInfo = { };
	<cc>// previous and next siblings</cc>
	navigationInfo.<hi>previousSibling</hi> = findContentAnchor( currentNode.previousElementSibling );
	navigationInfo.<hi>nextSibling</hi> = findContentAnchor( currentNode.nextElementSibling );
	<cc>// First and last siblings</cc>
	let parent = currentNode.parentElement;  <cc>// UL</cc>
	if ( parent.classList.contains( "sitemap-tree" )) parent = null ;
	navigationInfo.<hi>firstSibling</hi> = findContentAnchor( parent?.firstElementChild );
	navigationInfo.<hi>lastSibling</hi> = findContentAnchor( parent?.lastElementChild );
	<cc>// Compile chain of parents nodes</cc>
	navigationInfo.parentNodes = [ ];
	while ( parent ) {
		if ( parent.classList.contains( "sitemap-tree" )) break;  // sitemap root reached
		parent = parent.parentElement ;  <cc>// LI</cc>
		navigationInfo<hi>.parentNodes</hi>.unshift( findContentAnchor( parent ) || parent );  <cc>// A or LI</cc>
		parent = parent.parentElement ;  <cc>// UL</cc>
		}
	<cc>// Previous andNext in sequence</cc>
	const anchors = Array.from( document.getElementById( "sitemapRoot" ).querySelectorAll( "A" ));
	const currentIndex = anchors.indexOf( findContentAnchor( currentNode ));
	navigationInfo.<hi>previousSequential</hi> = anchors[ currentIndex - 1 ];
	navigationInfo.<hi>nextSequential</hi> = anchors[ currentIndex + 1 ];
	<cc>// Home</cc>
	navigationInfo.<hi>home</hi> = anchors[ 0 ] ;
	<cc>// Dispatch navigation-info-change event</cc>
	const event = new CustomEvent( "navigation-info-change" , { detail : { navigationInfo : navigationInfo } } ) ;
	<hi>document.dispatchEvent</hi>( event );
	}
</pre></figure>

<p>The last statement above dispatches the <tt>navigation-info-change</tt> event to the document. The event object carries a reference to the navigation info, so that clients that subscribe to the event can update their configuration.</p>

<!--h3--Compiling the Navigation Info--></div>

<!--h2--Implementation Details--></div>

</body></html>