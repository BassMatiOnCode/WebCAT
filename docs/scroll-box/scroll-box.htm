<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2024-08-07" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2024-11-14" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2024-11-15" />
<meta name="version" content="1" />
<meta name="sectionTitle" content="../title.svg" />

<link rel="icon" type="image/svg+xml" href="/favicon.svg" sizes="all" />
<link rel="stylesheet" href="/inc/web-cat/page-structure/tutorial-page-1.css" />
<script type="module" src="/inc/web-cat/page-structure/tutorial-page-1.js" ></script>
 
<meta name="categories" content="Projects > Web > Content Authoring Toolbox > Scroll Box" />
<meta name="tags" content="web, content, authoring, toolbox, HTML, JavaScript, CSS, WebCAT, component, scroll, box" />
<meta name="description" content="The scroll-box component is an alternative to the page-toolbar. It has a similar slim and unobtrusive design, and adds scrolling capabilities. It features a hidden scroll bar, which appears when the mouse pointer hovers over the element. Even with the scrollbar hidden, the content can be scrolled with a swiping gesture on touchscreens." />

<title>Scroll-Box (Web > Content Authoring Toolbox)</title>

</head><body>

<h1>Scroll-Box</h1>
<p class="subtitle">Horizontally Scrolling Container With Hidden Scroll-Bar</p>

<p id="pageAbstract"></p>

<p>The component provides a dynamic horizontal scroll-bar that appears when the mouse pointer hovers over it. On touchscreen devices, the content can be scrolled horizontally withou the scrollbar showing up.</p>

<h2 cbc>Using the Component</h2><div>

<p>The component consists of two files:</p>

<ul>
<li>scroll-box.css</li>
<li>scroll-box.js</li>
</ul>

<p>For detailed notes on how to import these files into a document or aggregation script, refer to <a hef="../component-anatomy.htm#using">WebCAT Component Anatomy</a>.</p>

<p>See the <a href="#examples">examples chapter</a> for more information on how to use this component.</p>

<!--h2--Using the Component--></div>

<h2 cbc>Related Components</h2><div>

<p>This component is related to other WebCAT components:</p>

<dl>
<dt><a href="../name/name.htm"></a></dt><dd>
	<p></p>
	</dd>
</dl>

<!--h2--Related Components--></div>

<h2 cbc>Examples</h2><div>

<p>We begin with the HTML structure. Provide a container (<tt>DIV</tt>) element and decorate it with the class names <tt>horizontal scroll-box</tt> so that the component's <tt>init()</tt> function can find and process it. Then add some elements. Here we use simple boxes with letters:</p>

<figure class="listing"><figcaption>Initial HTML structure</figcaption><pre>
&lt;<hi>div</hi> class="<hi>horizontal scroll-box</hi>"&gt;
	&lt;div&gt;A&lt;/div&gt;
	&lt;div&gt;B&lt;/div&gt;
		&vellip;
	&lt;div&gt;T&lt;/div&gt;
	&lt;div&gt;U&lt;/div&gt;
	&lt;/div&gt;
</pre></figure>

<p>After processing, the structure looks like this:</p>

<figure class="listing"><figcaption>Initial HTML structure</figcaption><pre>
&lt;div class="horizontal scroll-box"&gt;  <cc>&lt;!-- Scrollbox container --&gt;</cc>
	&lt;div id="curtain-1"&gt;  <cc>&lt;!-- Curtain --&gt;</cc>
		&lt;div&gt;  <cc>&lt;!-- Scrollbar provider --&gt;</cc>
			&lt;div&gt;  <cc>&lt;!-- item container --&gt;</cc>
				&lt;div&gt;A&lt;/div&gt;
				&lt;div&gt;B&lt;/div&gt;
					&vellip;
				&lt;div&gt;T&lt;/div&gt;
				&lt;div&gt;U&lt;/div&gt;
				&lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
</pre></figure>

<p>The <tt>init()</tt> code has added three more container <tt>DIV</tt>s. One of them is a "curtain" and got a unique id. But there more than meets the eye: <tt>Init()</tt> has created a <tt>style</tt> element at the end of the document <tt>head</tt>, which appears to be empty in the browser dev tools. But there are two rules, which provide a <tt>height</tt> style value for the curtain element. There is no text to be parsed, the rules have been added programmatically by <tt>init()</tt>.</p>

<p>We need a style rule to control the appearance and most importantly, the height of items:</p>

<figure class="listing"><figcaption>Item style</figcaption><pre>
	<cc>/* items */</cc>
.scroll-box.horizontal > div > div > div > div { 
	background-color : #ccc ; 
	display : inline-block ; 
	padding : 2px 8px ; 
	width : 20px ; 
	text-align : center ; 
	font-size : 20px 
	}
</pre></figure>


<p>Here is the demo:</p>

<figure class="demo"><figcaption>A simple example (<a href="demo-01.htm" target="_blank">demo-1.htm</a>)</figcaption>
<iframe class="content-height-observed" src="demo-01.htm"></iframe>
</figure>

<!--h2--Examples--></div>

<h2 cbc="xcollapsed">Implementation Details</h2><div>

<p>The idea is to provide a set of four nested containers, each providing specific functionality:</p>

<dl>
<dt>The scroll box, the outermost container</dt><dd>
	<p>Essentially invisible, but has a static height and determines the (static) layout height of the entire scroll-box stack, event if the content overflows the container at the bottom.</p>
	</dd>
<dt>The curtain box</dt><dd>
	<p>Provides the curtain effect and the border. If the mouse pointer hovers over the curtain box, a CSS rule expands the height so that the horizontal scrollbar becomes visible.</p>
	</dd>
<dt>The scrollbar provider</dt><dd>
	<p>A container with a <tt>display:block</tt> style. Expands to occupy the entire window width and provides the horizontal scroll-bar, if necessary.</p>
	</dd>
<dt>The element box, the innermost container</dt><dd>
	<p>Contains the items. Items determine the box height. The element has a <tt>white-space:nowrap</tt> style, thus overflows the window to the right if there are more items that fit into the window.</p>
	</dd>
</dl>

<p>The <tt>clientHeight</tt> property of an element represents its height <em>whithout</em> scroll-bar, the <tt>offsetHeight</tt> represents the height with the scrollbar <em>included</em>. These values on the scrollbar provider are used to create CSS rules for the height of the curtain element.</p>

<p>The height of the scrollbar provider is driven by the height of items in the item container, and therefore must be considered "dynamic". Therefore a <tt>SizeObserver</tt> is set up in <tt>init()</tt> to monitor the scrollbar provider. If <tt>clientHeight</tt> or <tt>offsetHeight</tt> change, the CSS rules for the curtain box are rewritten accordingly.</p>

<h3 cbc>Init()</h3><div>

<figure class="listing"><figcaption>The component init function</figcaption><pre>
export function init( ) {
	<cc>// Find scroll-box item containers and add the functional containers</cc>
	for ( const scrollbox of document.querySelectorAll( ".horizontal.scroll-box" )) {
		<cc>// Save references to the items</cc>
		const items = Array.from( scrollbox.childNodes );
		<cc>// Create the container stack</cc>
		const curtain = createElement( "DIV" , { attributes : { 
			<hi>id: `curtain-${ (++curtainID).toString().padStart( 3, "0" ) }` }</hi> 
			} );
		scrollbox.append( curtain );
		const scrollbarProvider = createElement( "DIV" ); 
		curtain.append( scrollbarProvider );
		const itemContainer = createElement( "DIV" ); 
		scrollbarProvider.append( itemContainer );
		<cc>// Moves items to their new parent</cc>
		itemContainer.append( ...items );  
		<cc>// Create the CSS height rules for the curtain box</cc>
		createHeightRule( scrollbarProvider, "clientHeight" );
		createHeightRule( scrollbarProvider, "offsetHeight", ":hover" );
		<cc>// Monitor the scrollbar provider height</cc>
		createObserver( scrollbarProvider );
		<cc>// It is now safe to show the box.</cc>
		scrollbox.style.visibility = "visible" ;
		}
	}
</pre></figure>

<p>The accompanying stylesheet initially sets the scrollbox visibility style to hidden, because elements might be shown vertically. When the HTML structures are set up, the related CSS rules are in effect, and we can show the scrollbox element.</p>

<p>Note that the curtain element gets a unique ID, which is required for the CSS height rules that are created at the bottom.</p>

<!--h3--Init()--></div>

<h3 cbc>Creating CSS Rules for the Curtains</h3><div>

<p>Both rules are created with a single function:</p>

<figure class="listing"><figcaption></figcaption><pre>
import * as <hi>dynamcStyles</hi> from "path/to/<hi>dynamic-styles.js</hi>" ;

function createHeightRule( scrollbarProvider, heightSelector, selectorAppendix="" ) {
	dynamcStyles.<hi>insertRule</hi>( `${ createSelector( scrollbarProvider, selectorAppendix) }` , `height : ${ scrollbarProvider[ heightSelector ] }px` ) ;
	}
</pre></figure>

<p>The <tt>heightSelector</tt> string is either "clientHeight" or "offsetHeight". <tt>selectorAppendix</tt> is either the empty string or ":hover". The function calls <tt>createSelector()</tt>:</p>

<figure class="listing"><figcaption></figcaption><pre>
function createSelector( scrollbarProvider, appendix="" ) {
	return `#${ scrollbarProvider.parentElement.id }${ appendix }` ;
	}
</pre></figure>

<p>This function reads the curtain element ID and generates one of two CSS selector strings:</p>

<pre>
#curtain-001
#curtain-001:hover
</pre>

<p>In the end, we get two CSS rules:</p>

<pre>
#curtain-001 { height: 31px; }
#curtain-001:hover { height: 43px; }
</pre>

<p>As we have seen, the scrollbar provider height is dynamic, so these rules must be rewritten if its height changes.</p>

<!--h3--Creating CSS Rules for the Curtains--></div>

<h3 cbc>Monitoring the Scrollbar Provider Height</h3><div>

<p>We setup a <a href="https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver">ResizeObserver</a> in a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures">closure structure</a>:</p>

<figure class="listing"><figcaption></figcaption><pre>
function createObserver( scrollbarProvider ) {
	<cc>// variables for recent height values</cc>
	let clientHeight = scrollbarProvider.clientHeight ;
	let offsetHeight = scrollbarProvider.offsetHeight ;
	new ResizeObserver( entries => { 
		&vellip;
		} ).observe( scrollbarProvider ); // immediately start monitoring
	}
</pre></figure>

<p>The function creates two local variables to store <tt>clientHeight</tt> and <tt>offsetHeigt</tt> of the scrollbox provider. Then we create a <tt>ResizeObserver</tt> and pass a callback function to the constructor. This callback function is executed when a scrollbar size change is detected.</p>

<p>The callback function compares the current versus recent height values. If they are different, the related CSS rule is rewritten. The references to the function-scoped variables keeps them alive: </p>

<figure class="listing"><figcaption></figcaption><pre>
		const entry = entries[ 0 ] ;
		if ( <hi>entry.target.offsetHeight !== offsetHeight</hi> ) { 
			<cc>// Update recent value</cc>
			offsetHeight = scrollbarProvider.offsetHeight ;
			<cc>// Update style rule</cc>
			<hi>createHeightRule</hi>( scrollbarProvider, "offsetHeight", ":hover" );
			}
</pre></figure>

<p>The code above detects changes in the <tt>offsetHeight</tt>, which is the case if the need for a horizontal scrollbar arises or vanishes. The code beneath does the same for a change of the <tt>clientHeight</tt>. This is the case if the maximum height of all items changes:</p>

<figure class="listing"><figcaption></figcaption><pre>
		if ( entry.target.<hi>clientHeight</hi> !== clientHeight ) { 
			<cc>// Update recent value</cc>
			clientHeight = scrollbarProvider.clientHeight ;
			<cc>// Update style rule</cc>
			<hi>createHeightRule</hi>( scrollbarProvider, "clientHeight", ":hover" );
			}
</pre></figure>

<p>Both parts are very similar, the differences are the variables compared, and the CSS selectors.</p>

<!--h3--Monitoring the Scrollbar Provider Height--></div>

<h3 cbc>Stylesheet Rules</h3><div>

<p>The rules have nostly structural selectors. This avoids cluttering the CSS namespace.</p>

<p>The rules for the scroll-box define the component height in the document:</p>
<figure class="listing"><figcaption>Scroll-box style rule</figcaption><pre>
	<cc>/* scroll-box */</cc>
.scroll-box.horizontal { 
	border : 1px none silver ; 
	<hi>height</hi> : 30px ; 
	visibility : hidden 
	}
</pre></figure>

<p>The visibility is set to hidden because the HTML structure has not been set up at this point, so the CSS rules below have no effect yet.</p>

<p>Next comes the curtain style rule. The element provides a border and has overflow hidden, so that the scrollbar of the scrollbar provider is hidden.</p>

<figure class="listing"><figcaption>Curtain style rule</figcaption><pre>
	<cc>/* curtain */</cc>
.scroll-box.horizontal > div { 
	border : 1px solid silver ; 
	overflow : hidden ; 
	transition : height 0.4s 0.3s linear 
	}
</pre></figure>

<p>The transition setting has a 0.3 seconds delay. This keeps the element "calm" when the mouse pointer is just briefly bypassing it.</p>

<p>Next is the scrollbar provider. It has <tt>overflow-x:auto</tt>, which means that the horizontal scrollbar is only shown if necessary. By the way, this setting demands the observation of its offset height changes:</p>

<figure class="listing"><figcaption>Scrollbar provider</figcaption><pre>
	<cc>/* scrollbar provider */</cc>
.scroll-box.horizontal > div > div { 
	padding : 2px ; 
	overflow-x : auto ; 
	scrollbar-color : #aaa #eee 
	}
</pre></figure>

<p>Next comes the item container. It is there to force the items into a single row with the <tt>white-space:nowrap</tt> setting:</p>

<figure class="listing"><figcaption>Item container</figcaption><pre>
	<cc>/* item container */</cc>
.scroll-box.horizontal > div > div > div { 
	white-space : nowrap ; 
	display : inline-block 
	}
</pre></figure>

<p>The setting <tt>display:inline-block</tt> makes the container stretch horizontally to fit the entire row of items.</p>

<p>Items are styled with the following rule:</p>

<figure class="listing"><figcaption>Item style</figcaption><pre>
	<cc>/* items */</cc>
.scroll-box.horizontal > div > div > div > div { 
	display : inline-block ; 
	}
</pre></figure>

<p>This rule sets the display style of items, so that they can have a defined width. the actual styling of items is outside the scope of this document. You can find an example in <a href="demo-01.htm" target="_blank">demo&nbsp;1</a>.</p>

<!--h3--Stylesheet Rules--></div>

<!--h2--Implementation Details--></div>

</body></html>