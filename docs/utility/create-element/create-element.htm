<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2024-08-07" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2024-11-12" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2024-11-12" />
<meta name="version" content="1" />
<meta name="sectionTitle" content="../../title.svg" />

<link rel="icon" type="image/svg+xml" href="/favicon.svg" sizes="all" />
<link rel="stylesheet" href="/inc/web-cat/page-structure/tutorial-page-1.css" />
<script type="module" src="/inc/web-cat/page-structure/tutorial-page-1.js" ></script>
 
<meta name="categories" content="Projects > Web > Content Authoring Toolbox > Utility" />
<meta name="tags" content="web, content, authoring, toolbox, HTML, JavaScript, CSS, WebCAT, component, utility, create" />
<meta name="description" content="createElement() streamlines the creation of elements with and without namespace, setting attributes and properties in one function call." />

<title>Create Element (Web > Content Authoring Toolbox)</title>

</head><body>

<h1>Create Element</h1>
<p class="subtitle">A utility function to create elements, set attributes and properties</p>

<p id="pageAbstract"></p>

<h2 cbc>Introduction</h2><div>

<p>Creating an HTML, MathML, SVG or XML element usually consists of several steps:</p>
<ol>
<li>Create the element and store a reference</li>
<li>Set attribute,...</li>
<li>Set properties,...</li>
<li>Inject the element into the host document.</li>
</ol>

<p>Creating and configuring a single element can easily take 10+ instructions. With the <tt>createElement()</tt> function, this can be reduced to a single instruction:</p>

<figure class="listing"><figcaption>Using createElement() to create an HTML element</figcaption><pre>
document.body.append( createElement( "P", { 
	attributes : { id : "paragraph-123" , class : "regular paragraph" } ,
	properties : { innerText : "John entered the room. It was silent. Nobody was there..." }
	} ) ) ;
</pre></figure>

<p>Create a container and add paragraphs:</p>

<figure class="listing"><figcaption>Creating a container</figcaption><pre>
document.body.insertBefore( createElement( "DIV", 
	{ attributes : { id : "container-123" , class : "citation" , style : "border : 1px solid silver ; padding : 20px" } } ) , null )
.insertBefore( createElement( "P", 
	{ properties : { innerText : "Emission of greenhouse gases must be reduced to zero by end of 2020" } } ) , null )
.parentElement.insertBefore( createElement( "P", 
	{ properties : { innerText : "Of course, this is utopic." } } ) , null );
</pre></figure>

<!--h2--Introduction--></div>

<h2 cbc>Using the Component</h2><div>

<p>The component consists of a single file:</p>

<ul>
<li>create-element.js</li>
</ul>

<p>For detailed notes on how to import these files into a document or aggregation script, refer to <a hef="../component-anatomy.htm#using">WebCAT Component Anatomy</a>.</p>

<!--h2--Using the Component--></div>

<h2 cbc>Module Configuration</h2><div>

<p>Module script parameters are passed in the query string of the import URL, as described in <a href="../component-anatomy.htm#passing-parameters">Anatomy of a WebCAT Component</a>.</p>

<dl>
<dt>namespace-key=key</dt><dd>
	<p>Defines the default namespace for created elements.</p>
	<p>Possible values for "key" are defined in the <a href="../xml-namespaces.htm#implementation-details">xml-namespaces</a> component. Example:</p>
	<pre>namespaceKey=svg</pre>
	<p>Don't use quotes around the value. Default value is html.</p>
	<p> See <a href="#namespace-key">Namespace Key</a> for more details.</p>
	</dd>
<dt>create-options=name:value,...</dt><dd>
	<p>The right hand side is parsed to create an object that is passed to the<a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement#options">options</a> parameter of the HTML runtime's <tt>createElement()</tt> function.</p>
	<p>Note that "name" must conform to the syntax rules for variable names, and value must conform to the syntax rules for literals. Specifically, strings must be enclosed in (single) quotes.</p>
	<p>Example:</p>
	<pre>is='my-webcomponent'</pre>
	</dd>
</dl>

<!--h2--Module Configuration--></div>

<h2 cbc>Related Components</h2><div>

<p>This component is related to other WebCAT components:</p>

<dl>
<dt><a href="../set-attributes/set-attributes.htm">set-attributes</a></dt><dd>
	<p>Sets attributes on the element.</p>
	</dd>
<dt><a href="../set-properties/set-properties.htm">set-properties</a></dt><dd>
	<p>Sets properties on the element.</p>
	</dd>
</dl>

<!--h2--Related Components--></div>

<h2 cbc>Programming Reference</h2><div>

<h3 cbc>createElement()</h3><div>

<p>Creates an element with optional namespaceURI, create options, and sets attributes and properties.</p>

<figure class="listing"><figcaption>createElement() signature</figcaption>
<pre>
export function createElement ( tagname, options = { } )
</pre></figure>

<p>Parameters and return value:</p>

<dl>
<dt>tagname</dt><dd>
	<p>{string} The tag name of the element, for example "P", "DIV", "SVG", et cetera/</p>
	</dd>
<dt>options</dt><dd>
	<p>{object={ }} An object that contains optional parameters as described below.</p>
	</dd>
<dt id="namespace-key">options.namespaceKey</dt><dd>
	<p>{string="html"} A namespace key as defined in the <a href="../xml-namespaces.htm#implementation-details">xml-namespaces</a> component. If createElementNS().</p>
	</dd>
<dt>options.createOptions</dt><dd>
	<p>{object={ }} As defined in the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement#options">createElement()</a> documentation. At the time of writing, only used for user-defined web components.</p>
	</dd>
<dt>options.attributes</dt><dd>
	<p>{object=undefined} Each attribute is defined as name-value pair on the attributes parameter object.</p>
	</dd>
<dt>options.properties</dt><dd>
	<p>{AssignmentDescription|[AssignmentDescription]={ }} as described in the documentation. In the simplest case, this is an object with name-value pairs, each describing an assignment property name or path, and an assignment value. Alternatively, a <a href="../set-properties/set-properties.htm#property-descriptor"><tt>PropertyDescriptor</tt></a> or an array of <tt>PropertyDescriptors</tt>.</p>
	</dd>
<dt>returns</dt><dd>
	<p>{HTMLElement} The function returns a reference to the element created.</p>
	</dd>
</dl>

<!--h3--createElement--></div>

<h3 cbc>Configuration</h3><div>

<p>The module exports a <tt>Configuration</tt> object with the following properties:</p>

<dl>
<dt>namespaceKey</dt><dd>
	<p>The default namespace key. See <a href="#namespace-key">Namespace Key</a> for more details.</p>
	</dd>
<dt>createOptions</dt><dd>
	<p>An object that is passed to the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement#options">options</a> parameter of the HTML runtime's <tt>createElement()</tt> function.</p>
	</dd>
</dl>

<!--h3--Configuration--></div>


<h3 cbc></h3><div>

<p></p>

<figure class="demo"><figcaption>A simple example (<a href="demo-1.htm" target="_blank">demo-1.htm</a>)</figcaption>
<iframe class="content-height-observed" src="demo-1.htm"></iframe>
</figure>

<p></p>

<!--h3----></div>

<!--h2--Programming Reference--></div>

<h2 cbc>Examples</h2><div>

<p></p>

<h3 cbc>Example 1</h3><div>

<p></p>

<figure class="listing"><figcaption></figcaption><pre>
</pre></figure>

<figure class="demo"><figcaption> (<a href="demo-1.htm" target="_blank">demo-1.htm</a>)</figcaption>
<iframe class="content-height-observed" src="demo-1.htm"></iframe>
</figure>

<p></p>

<!--h3--Example 1--></div>

<!--h2--Examples--></div>

<h2 cbc="collapsed">Implementation Details</h2><div>

<p></p>

<figure class="listing"><figcaption></figcaption>
<pre>
<cc>// Comment</cc> 
function <hi>name</hi> ( ) {
	...
	}
</pre></figure>

<!--h2--Implementation Details--></div>

</body></html>