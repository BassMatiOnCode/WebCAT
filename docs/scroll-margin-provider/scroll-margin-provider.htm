<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2024-08-07" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2024-11-01" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2024-11-01" />
<meta name="version" content="1" />
<meta name="sectionTitle" content="../title.svg" />

<link rel="icon" type="image/svg+xml" href="/favicon.svg" sizes="all" />

<link rel="stylesheet" href="/inc/web-cat/page-structure/tutorial-page-1.css" />
<script type="module" src="/inc/web-cat/page-structure/tutorial-page-1.js" ></script>
 
<meta name="categories" content="Projects > Web > Content Authoring Toolbox" />
<meta name="tags" content="web, content, autoring, toolbox, HTML, JavaScript, CSS, WebCAT, component, scroll, margin" />
<meta name="description" content="Calculates the scroll-margin-top and scroll-margin-bottom values from sticky toolbar elements at the top and/or bottom of the page." />

<title>Scroll Margin Provider (Web > Content Authoring Toolbox)</title>

</head><body>

<h1>Scroll Margin Provider</h1>

<p id="pageAbstract"></p>

<p>Using the scroll margins prevents and element from being (partially) obscured by sticky toolbars when the element is scrolled to the top of the window.</p>

<h2 cbc>Usage</h2><div>

<p>The component consists of a single file:</p>
<ul>
<li>scroll-margin-provider.js</li>
</ul>

<p>For detailed notes on how to import this file into a document or aggregation file, refer to <a hef="../component-anatomy.htm#using">WebCAT Component Anatomy</a>.</p>

<p>The toolbars must have the classname "toolbar" and the style <tt>position:sticky</tt>in order to be recognized.</p>

<!--h2--Usage--></div>

<h2 cbc>Module Configuration</h2><div>

<p>Module script parameters are passed in the query string of the script URL, as described in <a href="../component-anatomy.htm#passing-parameters">Anatomy of a WebCAT Component</a>.</p>

<dl>
<dt><tt>recalculate=never</tt></dt><dd>
	<p>Optional. By default, the component recalculates the scroll margins every time a <tt>query-scroll-margins</tt> event is received. This can be deactivated in environments where the toolbar heights cannot change or in a height change push environment to improve performance a little bit.</p>
	<p>The push notification infrastructure is currently not implemented.</p>
	</dd>
</dl>

<!--h2--Module Configuration--></div>

<h2 cbc>Events</h2><div>

<p>The component listens for the following events:</p>

<dl>
<dt><tt>query-scroll-margins</tt> on <tt>document</tt></dt><dd>
	<p>Recalculates scroll margins required by sticky toolbars at the top or bottom of the page, updates the scroll margin styles on potential link target elements, and returns the margin values in the event.detail object members.</p>
	<p><tt>event.detail.recalculate</tt> (optional, boolean): If true, the margins are recalculated. If false, recalulation is skipped. If absent, the module configuration value is used.</p>
	</dd>
</dl>

<!--h2--Events--></div>

<h2 cbc>Backgrounds</h2><div>

<p>During component initialization, the component calculates the maximum height of top and bottom toolbars, then sets the <tt>style.scrollMarginTop</tt> and <tt>style.scrollMarginBottom</tt> properties on elements that have an <tt>id</tt> attribute. These are potential scroll targets.</p>

<p>A client can use these values to scroll the element to the top and bottom of the document, avoiding the space occupied by sticky toolbars. Alternatively, the client can dispatch a <tt>query-scroll-margins"</tt> event to the <tt>document</tt> to obtain these values.</p>

<p>The <tt>scroll-margin-provider</tt> implements a <tt>query-scroll-margins</tt> event listener on the <tt>document</tt> object. A client can request the top and bottom scroll margins in the following way:</p>

<figure class="listing"><figcaption>Scroll margins query</figcaption>
<pre>
<cc>// Create a custom event object</cc>
const event = new CustomEvent ( "query-scroll-margins" , { 
	detail : { } } ) ;
document.dispatchEvent ( event ) ;
<cc>// Use the query results</cc>
const scrollMarginTop = event.detail.<hi>marginTop</hi> || 0 ;
const scrollMarginBottom = event.detail.<hi>marginBottom</hi> || 0 ;
</pre></figure>

<p>The provider places the requested values in event detail members as shown above.</p>

<p>To obtain the most recent values, add a <tt>recalculate:true</tt> member to the <tt>event.detail</tt> object:</p>

<figure class="listing"><figcaption>Recalculating the scroll margins</figcaption>
<pre>
<cc>// Create a custom event object</cc>
const event = new CustomEvent ( "query-scroll-margins" , { 
	detail : { <hi>recalculate : true</hi> } } ) ;
document.dispatchEvent ( event ) ;
<cc>// Use the query results</cc>
const scrollMarginTop = event.detail.<hi>marginTop</hi> ;
const scrollMarginBottom = event.detail.<hi>marginBottom</hi> ;
</pre></figure>

<p>This might be necessary if automatic recalculation has been turned off via module configuration parameters.</p>

<p>As a byproduct, the scroll margin values are also returned in the event detail object.</p>

<p>This can be tested in the following demonstration:</p>

<figure class="demo"><figcaption>Testing the scroll margin provider (<a href="demo-1.htm" target="_blank">demo-1.htm</a>)</figcaption>
<iframe src="demo-1.htm" style="height:300px"></iframe>
</figure>

<p>Try to change the browser window width so that toolbar 2 expands to span a second row. Scroll to top automatically uses the new value.</p>

<!--h2--Backgrounds--></div>

</body></html>