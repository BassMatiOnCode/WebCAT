<html><head>
<style>
p { margin : 5px 5px }
dt { margin-top: 30px }
dt.open > span { color : indianred }
dt.closed > span { color : darkgreen }
div.description:before {	content : "Description:" }
div.resolution:before { content : "Resolution:" }
pre { tab-size : 20px ; margin : 5px 0 -20px -20px}
</style>

</head><body>

<dl class="todo-list">
<dt class="closed fixed"><span class="date">2024-10-07-001</span> Replace direct usage of element ID</dt><dd>
	<p class="affected items">All script modules</p>
	<p class="close-info"><span class="date">2024-10-07</span> fixed, closed</p>
	<p class="description">Direct use of element ID might lead to "Element is not defined" exceptions. Instead, use document.getElementById(), which returns null or undefined and does not throw an exception.</p>
	</dd>

<dt class="closed fixed"><span class="date">2024-10-07-002</span> In-Page navigation, scroll to previous heading fails at the bottom of page</dt><dd>
	<p class="affected components">in-page-navigation</p>
	<p class="close-info"><span class="date">2024-10-07</span> closed, fixed</p>
	<p class="description">If scrolled to bottom of the page, no heading below window top is found when scrolling to previous chapter.
	<br/>Solution: ScrollTargets must be searched in reverse order, from bottom to top.</p>
	</dd>

<dt class="open"><span class="date">2024-10-09-001</span> Page Toolbar, overflowing buttons</dt><dd>
	<p class="affected components">main-toolbar</p>
	<p class="close-info"><span class="date"></span></p>
	<p class="description">Overflowing buttons flow to the next line, but the toolbar height does not change.</p>
	</dd>

<dt class="open"><span class="date">2024-10-11-001</span> Expanding all chapters not always scrolls to the desired paragraph</dt><dd>
	<p class="affected components">tool-button/collapse-all-chapters</p>
	<p class="close-info"><span class="date"></span></p>
	<p class="description">The implementation is correct, however, the concept could be refined. If the user expands the desired chapter, this could be the element which should be scrolled into view. However, if the user then scrolls down, the chapter heading might go out of view if favor of a paragraph in that chapter. Then this paragraph is the element to be scrolled into view. </p>
	<p class="proposal">Expanding a chapter makes the chapter "active". If that chapter heading visible, this heading will be scrolled into view. If the active chapter heading is out of view and the topmost visible element is a child of the active chapter content, this element will be scrolled into view. If the topmost visible element is not a child of the active chapter, this element will be scrolled into view.</p>
	</dd>

<dt class="closed fixed"><span class="date">2024-10-13-001</span> Fragment loader does not inject text nodes.</dt><dd>
	<p class="affected components">fragment-loader</p>
	<p class="close-info"><span class="date">2024-10-13</span> fixed, closed</p>
	<div class="description">
		<p>If text is enclosed in SPAN tags, it works.</p></div>
	<div class="resolution">
		<p>Change in fragment-loader-1.js:60</p>
		<pre class="changed from">
		const fragment = new DocumentFragment( );
		fragment.append (...( ... bufferContent.children )) ;
		</pre>
		<p>to</p>
		<pre class="changed to">
		fragment.append (...( ... bufferContent.childNodes )) ;
		</pre>
		</div>
	</dd>

<dt class="open"><span class="date">2024-10-15-001</span> Content Height Observer has problems with SVG in OBJECT</dt><dd>
	<p class="affected components">content-height-observer</p>
	<p class="close-info"><span class="date"></span></p>
	<div class="description">
		<p>There are several problems:</p>
		<ul>
		<li>The SVG element has an offset height of zero, so the oberver handler cannot set the size of the document host element correctly.</li>
		<li>A growing SVG element inflates the size of its parent element, but does not shrink it when it it shrinks. Therefore, the content height observer does not detect size changes.</li>
		<li>Wrapping the SVG in an HTML file and importing it into the target document with an IFRAME element only works if both BODY and HTML elements have the style height property set to "fit-content".</li>
		</ul></div></dd>

<dt class="closed fixed"><span class="date">2024-10-15-002</span> Sitemap Navigator does not find a toc.htm fragment in the same folder as current document</dt><dd>
	<p class="affected components">sitemap-navigator</p>
	<p class="close-info"><span class="date"></span></p>
	<div class="description">
		<p>Two problems:
		<ul>
		<li>The document localhost/web-toc/sitemap-navigator/toc.htm was not found.</li>
		<li>The link for localhost/web-toc/sitemap-navigator/partially-loaded-sitemap.htm was not found in the sitemap tree.</li>
		</ul></p>
		<p></p>
		</div>
	<div class="resolution-notes">
		<p>Problem 1 was caused by a wrong attribute name (data-load-ondemand instead of data-load-interactive).</p>
		<p>Problem 2 is a concurrency problem. In highlightPath(), the function findCurrentEntry() after the call to loadMissingFragments() fails because the fragments are loaded on a different thread and the function is aborted. After the fragments have been injected, highlightPath() must be executed again or continued.</p>
		</div>
	</dd>

<dt class="closed fixed"><span class="date">2024-10-28-001</span> findCurrentEntry() doesn't find anchor with hash in URL</dt><dd>
	<p class="affected components">sitemap-navigator</p>
	<p class="close-info"><span class="date">2024-10-28</span> fixed, closed.</p>
	<div class="resolution">
		<p>The anchor in the sitemap has no hash in the URL.</p>
		<p>The search must try URL with hash first. In case of failure, try URL without hash next. That should succeed.</p>
		<p>findCurrentEntry(contentAddress) parameter type changed from string to URL object.</p>
		</div>
	</dd>

<dt class="closed fixed"><span class="date">2024-10-28-002</span> Active path in sitemap tree needs some CSS</dt><dd>
	<p class="close-info"><span class="date">2024-11-05</span> fixed, closed.</p>
	<p class="affected components">sitemap-navigator</p>
	<div class="description">
		<p>The node icon color must be changed to some blue, the icon color for active path elements remains dark orange. An additional document icon may have to be introduced.</p>
		</div>
	</dd>

<dt class="fixed closed"><span class="date">2024-10-29-001</span> Content-height observed iframe does not shrink to original size if content is removed</dt><dd>
	<p class="affected components">content-height-observer</p>
	<p class="close-info"><span class="date">2024-10-29-001</span> fixed, closed.</p>
	<div class="description">
		<p>If content in a hosted document is deleted so that its height decreases, the size of the IFRAME host does not shrink.</p>
		</div>
	<div class="resolution">
		<p>Manually adding the "height:fit-content" style to HTML and BODY elements made the IFRAME shrink to the required size. Therefore, these style properties are set in the load event handler.</p>
		<p>Fixing this in the script is preferred over creating a stylesheet that would have to imported into the hosted document &ndash; which would violate one of the design goals (hosted document is agnostic about being hosted or not).</p>
		</div>
	</dd>

<dt class="closed fixed"><span class="date">2024-10-31-001</span> Refactor in-page-navigation, link-target-highlighter, link-target-scrolling.</dt><dd>
	<p class="affected components">in-page-navigation, highlight-link-target</p>
	<p class="close-info"><span class="date">2024-11-04</span> Closed, fixed.</p>
	<div class="description">
		<p>There are a number of distinct features:</p>
		<ul>
		<li>Figuring out the element's scroll margin top amount</li>
		<li>Scroll a link target element into view</li>
		<li>Highlight animation of the link target element</li>
		</ul>
		<p>The first point can be implemented in a <tt>scroll-margins-provider</tt> component, which inspects the elements with <tt>position:sticky</tt> and calculates a top and bottom margin values. The interface is an event listener on the document element, listening to the "query-scroll-margins" event.</p>
		<p>The second point can be implemented in a <tt>link-target-element</tt> component, which can be imported into html documents. The component implements smooth scrolling to the link target element, if required, after html fragments have been loaded. This module uses the <tt>scroll-margins-provider</tt>.</p>
		<p>The third point is an entirely unrelated stand-alone component, <tt>highlight-link-target</tt>, which catches clicks on anchors with links to elements on the same page. Also, the document fragement identifier in the URL ("hash") is covered.. </p>
		</div>
	<div class="resolution">
		<p>in-page-navigation and link-target-scrolling consolidated in page-scrolling.</p>
		</div>
	</dd>

<dt class="closed fixed"><span class="date">2024-11-02-001</span> Combine link-target-scrolling and in-page-navigation</dt><dd>
	<p class="affected components">link-target-scrolling, in-page-navigation</p>
	<p class="close-info"><span class="date">2024-11-04</span> closed, fixed.</p>
	<div class="description">
		<p>Both are very similar. Headings are similar to link targets, both implement smooth scrolling.</p>
		</div>
	<div class="resolution">
		<p>Code is now in page-scrolling component.</p>
		</div>
	</dd>

<dt class="closed fixed"><span class="date">2024-11-02-002</span> Change Intra-Page Scroll Buttons to Event Protocol</dt><dd>
	<p class="affected components">Tool Buttons</p>
	<p class="close-info"><span class="date">2024-11-04</span> closed, fixed.</p>
	<div class="description">
		<p>Tool Buttons should dispatch an intra-page-navigation event to to document. This decouples the components from the navigation module.</p>
		</div>
	<div class="resolution">
		<p>Went smooth.</p>
		</div>
	</dd>

<dt class="open"><span class="date">2024-11-06-001</span> Replace data-load-interactive with data-load-ondemand</dt><dd>
	<p class="affected components">multiple</p>
	<p class="close-info"><span class="date"></span></p>
	<div class="description">
		<p>Describes the purose of on-demand loading of document fragements better.</p>
		</div>
	<div class="resolution">
		<p></p>
		</div>
	</dd>

<dt class="closed fixed"><span class="date">2024-11-07-001</span> Fragment Loader Rework</dt><dd>
	<p class="affected components">fragment-loader, sitemap-navigator</p>
	<p class="close-info"><span class="date">2024-11-07</span> fixed, closed.</p>
	<div class="description">
		<p>The fragment loader must be overhauled in order to work better with JavaScript promises.</p>
		</div>
	<div class="resolution">
		<p>We have now two loader functions, loadFragments(rootElement), and loadSitemapFragments(url). They return a Promise object which resolves to an injection summary array. Both use fetchFragment() and injectFragment(), which in turn use parse() and rebaseUrls(). These six functions constitute the core logic.</p>
		<p>The sitemap-navigator component has been changed to use fragmentLoader.loadSitemapFragments(). In code to guess sitemap fragment URLs (path/to/toc.htm) has beed greatly simplified. Fetching them is now straightforward with promises.</p>
		</div>
	</dd>

<!--
<dt class="open"><span class="date"></span></dt><dd>
	<p class="affected components"></p>
	<p class="close-info"><span class="date"></span></p>
	<div class="description">
		<p></p>
		</div>
	<div class="resolution">
		<p></p>
		</div>
	</dd>
-->

</dl>
</body></html>